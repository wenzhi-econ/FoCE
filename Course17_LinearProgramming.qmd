---
title: "Course 17 and 18: Linear Progamming and its Application in Ecnomics"
format:
    html:
        theme: cosmo
        code-fold: false 
        code-line-numbers: true
        code-copy: true
        highlight-style: github
        number-sections: true
        toc: true
jupyter: python3
execute: 
    eval: true
    echo: true
---

# The first example: Optimal production portfolio

Let $x$ and $y$ denote production of goods $A$ and $B$ by some firm. The production technology is restricted in the following two inequalities:

$$
\left\{\begin{array}{l}-x + y \leq 4 \\2 x-y \leq 8\end{array}\right.
$$

In addition, there is a resource constraint given by

$$
x + 2 y \leq 14.
$$

And the objective function (profit) is given by

$$
\pi (x, y) = 2x + y.
$$

Adding the natural non-negativity constraints, we can write this linear programming in the matrix form:

$$
\begin{aligned}
& \max \left(c^T x\right) \text{   subject to   } A x \leq b \\
& c=\left(\begin{array}{ll}2 & 1\end{array}\right), A=\left(\begin{array}{cc}-1 & 1 \\2 & -1 \\1 & 2 \\-1 & 0 \\0 & -1\end{array}\right), \quad b=\left(\begin{array}{c}4 \\8 \\14 \\0 \\0\end{array}\right) .
\end{aligned}
$$

To solve this simple example, we will use the `scipy.optimize.linprog` function provided by the SciPy package (for more information about this function, read its [document here](https://docs.scipy.org/doc/scipy-1.10.0/reference/generated/scipy.optimize.linprog.html#scipy.optimize.linprog).

```{python}
# | label: linprog example
# | echo: true 
# | eval: true 

import sys
import numpy as np 
from scipy.optimize import linprog

# ?? version information
print(sys.version)
print(np.__version__)

# we need to transform it into a minimization problem
c = np.array([-2, -1])
A = np.array([[-1, 1], [2, -1], [1, 2], [-1, 0], [0, -1]])
b = np.array([4, 8, 14, 0, 0])


def outf(arg):
    print(f"iteration {arg.nit}, current solution {arg.x}")

linprog(c=c, A_ub=A, b_ub=b, method='simplex', callback=outf)

# We should use another method suggested by SciPy
linprog(c=c, A_ub=A, b_ub=b, method='highs')
```

# An economic application: Measuring illegal trade

## Empirical facts

### Background

Beijing license plate lottery

-   Cars driving in Beijing are required to have Beijing license plates.

-   From Jan 2011 license plates are rationed to a quota of about 35% of the previous yearâ€™s sales.

-   License plates are allocated by a lottery with simple application.

-   A Beijing household needs a license plate before it can register a new car.

-   License plates are non-transferable.

### Facts

-   The distribution of cars has shifted from cheaper to more expensive car models.
-   Hard to explain if lottery is a truly random allocation of license plates to the car purchasers.
-   No similar shifts in sales in comparable cities without rationing policy, in the same time period.
-   No supply side responses to the rationing policy.

## Code up this problem

### Visualize the setting

First, let's read the dataset and have initial data preparation work.

```{python}
# | label: load the dataset 
# | eval: true

import pandas as pd 

dt = pd.read_stata(r'SampleCodes\_static\data\beijin_data.dta')

# have an initial look at the dataset
print(dt.head(n=10))

# drop observations with nan
dt.dropna(inplace=True)
print(f'After droping the missing values, this dataset has {dt.shape[0]} observations and {dt.shape[1]} variables.\n')

# winsorization
print(dt['MSRP'].describe())
q99 = dt['MSRP'].quantile(0.99)
dt = dt[dt['MSRP']<q99]
print(dt['MSRP'].describe(), "\n")
print(f'After droping the missing values, this dataset has {dt.shape[0]} observations and {dt.shape[1]} variables.')
```

Next, let's contrast the price distribution before and after the introduction of plates ration.

```{python}
# | label: compare distributions 

import matplotlib.pyplot as plt 

plt.rcParams['figure.figsize'] = [12, 8]

def plot2hist(d1, d2, bins=10, labels=["1", "2"]):
    """Plots two overlapping histograms"""
    plt.hist(
        d1, bins=bins, density=True, histtype="step", label=labels[0]
    )
    plt.hist(
        d2, bins=bins, density=True, histtype="step", label=labels[1]
    )
    plt.legend()
    plt.ion()
    plt.show()


dt10 = dt[dt["year"] == 2010]["MSRP"]
dt11 = dt[dt["year"] == 2011]["MSRP"]
plot2hist(dt10, dt11, labels=["2010", "2011"])
```

### Transfer it into a linear programming problem

Now, let's transform this realistic setting into a linear programming problem. The goal is to interpret this setting through the lens of the following minimization problem.

$$
\begin{gathered}
\min \sum_{i=1}^m \sum_{j=1}^n \operatorname{cost}_{i j} x_{i j}, \text { subject to } \\
\sum_{i=1}^m x_{i j}=\text { origin }_j, j \in\{1, \ldots, n\}, \\
\sum_{j=1}^n x_{i j}=\text { destination }_i, i \in\{1, \ldots, m\}, \\
x_{i j} \geq 0 \text { for all } i, j.
\end{gathered} 
$$

First, we can discretize the continuous price distribution into a 5-point discrete distribution, so that $m = n = 5$ in the following problem.

Next, we need to exogenously specify the cost associated from "transporting from the $i$th point to $j$ th point". Assume that such transportation has no cost if $i = j$, and with unit cost if $i \neq j$.

Finally, we can calculate the two variables $origin_{ij}$ and $destination_{ij}$ from the data, which are presented below.

```{python}
# | label: origin and destination 

# number of bins to represent distribution
N = 5
dt['gr'] = pd.qcut(dt.MSRP, q=N, labels=False) 
gr10 = dt[dt.year==2010].groupby('gr')
gr11 = dt[dt.year==2011].groupby('gr')
d10 = gr10.MSRP.count()/dt[dt.year==2010].MSRP.count()
d11 = gr11.MSRP.count()/dt[dt.year==2011].MSRP.count()
print(d10, d11, sep='\n\n')
```

Therefore, we can set up the parameters of this linear programming problem now.

```{python}
# | label: set up parameters

costs = np.ones((N,N)) - np.eye(N)
origins = np.array(d10)
destinations = np.array(d11)

# To have a visual representation of the cost matrix, run the following codes.
plt.rcParams['figure.figsize'] = [5, 5]
plt.spy(costs)
```

Then, set up the problem using the arrays that can be directly passed to the `sicpy.optimize.linporg` function.

```{python}
# | label: arguments 

C = costs.reshape(N*N)
A1 = np.kron(np.eye(N),np.ones((1,N)))  # sums of x for each origin
A2 = np.kron(np.ones((1,N)),np.eye(N))  # sums of x for each destination
A = np.vstack((A1,A2))  # concatenate vertically
plt.spy(A)
b = np.concatenate((origins,destinations))
```

Finally, we can solve the problem now!

```{python}
# | label: solve the problem 

res = linprog(c=C,A_eq=A[:-1],b_eq=b[:-1],bounds=(0,None),method='simplex')
print(res.message)
X = res.x.reshape((N,N)) # reshape back to X_ij
plt.spy(X)
print(X)
black_market_estim = 1 - np.diag(X).sum() # do not count the stationary diagonal
print(f'With {N=}, the lower bound on black market share is {black_market_estim:.5f}.')
```